
import { useEffect, useState } from "react";
import { useNavigate } from "react-router-dom";
import { VideoUploader } from "@/components/VideoUploader";
import { DashboardLayout } from "@/components/DashboardLayout";
import { VideoPreview } from "@/components/VideoPreview";
import { AnalysisLoading } from "@/components/AnalysisLoading";
import { AnalysisResults } from "@/components/AnalysisResults";
import { StartAnalysisButton } from "@/components/StartAnalysisButton";
import { useToast } from "@/hooks/use-toast";
import { Sparkles, Zap } from "lucide-react";

const VideoAnalysis = () => {
  const [user, setUser] = useState<{ name: string; email: string } | null>(null);
  const [videoFile, setVideoFile] = useState<File | null>(null);
  const [videoUrl, setVideoUrl] = useState<string | null>(null);
  const [isAnalyzing, setIsAnalyzing] = useState(false);
  const [analysisComplete, setAnalysisComplete] = useState(false);
  const [analysisContent, setAnalysisContent] = useState<any>(null);
  const [currentStep, setCurrentStep] = useState("Initializing...");
  const [progress, setProgress] = useState(0);
  const navigate = useNavigate();
  const { toast } = useToast();
  
  useEffect(() => {
    const storedUser = localStorage.getItem("user");
    if (!storedUser) {
      navigate("/login");
      return;
    }
    
    setUser(JSON.parse(storedUser));
  }, [navigate]);
  
  const handleVideoUploaded = (file: File, url: string) => {
    setVideoFile(file);
    setVideoUrl(url);
    
    toast({
      title: "üé¨ Video uploaded successfully!",
      description: "Ready to analyze your content with AI",
    });
  };
  
  const simulateAnalysis = async (file: File) => {
    if (!file) return;
    
    setIsAnalyzing(true);
    
    try {
      const steps = [
        { step: "üîÑ Uploading video to cloud...", progress: 15 },
        { step: "üéß Extracting audio track...", progress: 30 },
        { step: "üìù Generating AI transcript...", progress: 50 },
        { step: "üîç Analyzing content themes...", progress: 70 },
        { step: "‚ú® Creating SEO keywords...", progress: 85 },
        { step: "üéØ Optimizing hashtag strategy...", progress: 95 },
        { step: "üöÄ Finalizing recommendations...", progress: 100 }
      ];
      
      for (const { step, progress } of steps) {
        setCurrentStep(step);
        setProgress(progress);
        await new Promise(resolve => setTimeout(resolve, 1500));
      }
      
      // Generate mock analysis data
      const mockHashtags = [
        "technology", "innovation", "tutorial", "howto", "tips", 
        "productivity", "business", "entrepreneur", "success", "growth",
        "digital", "marketing", "strategy", "content", "viral"
      ];
      
      setAnalysisContent({
        title: file.name.replace(/\.[^/.]+$/, ""),
        hashtags: mockHashtags,
        transcript: "This is a sample transcript generated by our AI system. The content discusses various strategies for improving video engagement and SEO optimization. Key topics include hashtag research, audience targeting, and content optimization techniques that can help boost your video's visibility across social media platforms.",
        summary: "A comprehensive guide to video optimization strategies, focusing on SEO best practices, hashtag effectiveness, and audience engagement techniques for maximum reach and impact.",
        chartData: mockHashtags.slice(0, 10).map((tag, index) => ({
          tag,
          count: Math.floor(Math.random() * 500) + 100,
          relevance: Math.floor(Math.random() * 40) + 60
        }))
      });
      
      setIsAnalyzing(false);
      setAnalysisComplete(true);
      
      toast({
        title: "üéâ Analysis completed!",
        description: "Your video optimization insights are ready",
      });
    } catch (error) {
      console.error("Analysis error:", error);
      setIsAnalyzing(false);
      
      toast({
        title: "‚ùå Analysis failed",
        description: "Please try again or contact support",
        variant: "destructive",
      });
    }
  };
  
  if (!user) {
    return null;
  }
  
  return (
    <DashboardLayout title="AI Video Analysis">
      <div className="space-y-8">
        {!videoFile ? (
          <div className="glass-card p-8 text-center">
            <div className="mb-6">
              <div className="w-20 h-20 bg-gradient-to-br from-blue-500 to-purple-600 rounded-3xl flex items-center justify-center mx-auto mb-4">
                <Sparkles className="h-10 w-10 text-white" />
              </div>
              <h2 className="text-3xl font-bold mb-3 bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent">
                AI-Powered Video Analysis
              </h2>
              <p className="text-xl text-gray-600 mb-6 max-w-2xl mx-auto">
                Upload your video and watch our AI extract powerful SEO insights, viral hashtags, and optimization recommendations
              </p>
              <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-8 max-w-3xl mx-auto">
                <div className="p-4 bg-blue-50 rounded-xl border border-blue-200">
                  <div className="text-2xl mb-2">üéØ</div>
                  <div className="font-semibold text-blue-700">Smart Keywords</div>
                  <div className="text-sm text-blue-600">AI-generated SEO terms</div>
                </div>
                <div className="p-4 bg-green-50 rounded-xl border border-green-200">
                  <div className="text-2xl mb-2">üìà</div>
                  <div className="font-semibold text-green-700">Viral Hashtags</div>
                  <div className="text-sm text-green-600">Trending tag suggestions</div>
                </div>
                <div className="p-4 bg-purple-50 rounded-xl border border-purple-200">
                  <div className="text-2xl mb-2">üöÄ</div>
                  <div className="font-semibold text-purple-700">Performance Boost</div>
                  <div className="text-sm text-purple-600">Optimize for maximum reach</div>
                </div>
              </div>
            </div>
            <VideoUploader onVideoUploaded={handleVideoUploaded} />
          </div>
        ) : (
          <>
            <VideoPreview videoFile={videoFile} videoUrl={videoUrl} />
            
            {isAnalyzing ? (
              <AnalysisLoading currentStep={currentStep} progress={progress} />
            ) : analysisComplete && analysisContent ? (
              <AnalysisResults analysisContent={analysisContent} />
            ) : (
              <div className="glass-card p-8 text-center">
                <div className="w-16 h-16 bg-gradient-to-br from-green-500 to-blue-500 rounded-2xl flex items-center justify-center mx-auto mb-4">
                  <Zap className="h-8 w-8 text-white" />
                </div>
                <h3 className="text-2xl font-bold mb-3">Ready to Analyze</h3>
                <p className="text-gray-600 mb-6">Click below to start AI analysis of your video content</p>
                <StartAnalysisButton onStartAnalysis={() => simulateAnalysis(videoFile)} isLoading={isAnalyzing} />
              </div>
            )}
          </>
        )}
      </div>
    </DashboardLayout>
  );
};

export default VideoAnalysis;
